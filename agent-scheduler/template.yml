# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Buildkite On-Demand Agent Scheduler

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'

Parameters:
  EventBridgeBusName:
    Type: String
    Description: Name of an EventBridge Bus in this region that is receiving Buildkite Partner Events, see https://buildkite.com/docs/integrations/amazon-eventbridge
    AllowedPattern: ^[a-zA-Z0-9\-\._/]+
  BuildkiteQueue:
    Type: String
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    AllowedPattern: ^[a-zA-Z0-9\-_]{1,255}
  BuildkiteAgentToken:
    Type: String
    Description: Buildkite agent registration token, see https://buildkite.com/docs/agent/v3/tokens
    NoEcho: true

Resources:
  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from self
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
  EcsSecurityGroupEgressV4:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress to anywhere IPv4
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupEgressV6:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Egress to anywhere IPv6
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      CidrIpv6: ::/0

  RunTaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
  
  BuildkiteRunTask:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that dequeues Buildkite Job Scheduled notifications and runs an ECS task for them
      Runtime: nodejs10.x
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');

        function getAgentQueryRule(rule, agentQueryRules) {
            let taskDefinition = agentQueryRules.filter(query_rule => {
                    return query_rule.startsWith(`${rule}=`);
                })
                .map(query_rule => {
                    return query_rule.split("=")[1];
                })
                .shift();
            
            return taskDefinition;
        }

        function getDefaultEcsRunTaskParams(cluster, job) {
            let jobId = job.uuid || job.id;
            let subnets = process.env.VPC_SUBNETS.split(",");
            
            let params = {
                cluster: cluster,
                count: 1,
                launchType: "FARGATE",
                networkConfiguration: {
                    awsvpcConfiguration: {
                        assignPublicIp: "ENABLED",
                        subnets: subnets
                    }
                },
                overrides: {
                    containerOverrides: [
                        {
                            name: "agent",
                            command: [
                                "start",
                                "--disconnect-after-job",
                                "--disconnect-after-idle-timeout=10"
                            ],
                            environment: [
                                {
                                    "name": "BUILDKITE_AGENT_ACQUIRE_JOB",
                                    "value": jobId,
                                },
                            ]
                        }
                    ],
                },
                taskDefinition: "buildkite",
            };
            
            return params;
        }

        function getEcsRunTaskParamsForJob(cluster, job) {
            let params = getDefaultEcsRunTaskParams(cluster, job);

            let taskDefinition = getAgentQueryRule("task-definition", job.agent_query_rules);
            if (taskDefinition != undefined) {
                // Task definition is overridden...

                console.log(`fn=getEcsRunTaskParamsForJob taskDefinition=${taskDefinition}`);
                params.taskDefinition = taskDefinition;
            }

            let taskRole = getAgentQueryRule("task-role", job.agent_query_rules);
            if (taskRole != undefined) {
                let taskRoleArn = `${process.env.TASK_ROLE_ARN_PREFIX}/${taskRole}`;

                console.log(`fn=getEcsRunTaskParamsForJob taskRoleArn=${taskRoleArn}`);
                params.overrides.taskRoleArn = taskRoleArn;
            }
            
            return params;
        }

        async function sleep(ms){
            return new Promise(resolve => {
                setTimeout(resolve, ms)
            });
        }

        async function runTaskForBuildkiteJob(cluster, job) {
            console.log(`fn=runTaskForBuildkiteJob attempt=${attempt}`);
            
            for (var attempt = 1; attempt < 6; attempt++) {
                try {
                    let ecs = new AWS.ECS({apiVersion: '2014-11-13'});
                    let taskParams = getEcsRunTaskParamsForJob(cluster, job);

                    console.log(`fn=runTaskForBuildkiteJob attempt=${attempt} at=runTask params=${JSON.stringify(taskParams)}`);
                    let result = await ecs.runTask(taskParams).promise();
                    console.log(`fn=runTaskForBuildkiteJob attempt=${attempt} at=runTask result=${JSON.stringify(result)}`);

                    return result;
                }
                catch (e) {
                    console.log(`fn=runTaskForBuildkiteJob attempt=${attempt} at=error error=${JSON.stringify(e)}`);
                    
                    await sleep(1000 * Math.pow(attempt, 2));
                    
                    continue;
                }
            }
            
            throw new Error("Couldn't start ECS task after 5 attempts");
        }
        
        exports.handler = async (event) => {
            console.log(`fn=handler event=${JSON.stringify(event)}`);

            let cluster = process.env.ECS_CLUSTER_NAME;
            
            let tasks = event.Records.map(record => {
                let { Job } = JSON.parse(record.body);
                return runTaskForBuildkiteJob(cluster, Job);
            });
            
            await Promise.all(tasks);

            return {
                statusCode: 200,
            };
        };
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RunTaskQueue.Arn
            BatchSize: 1
      MemorySize: 128
      Timeout: 105
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSPollerPolicy:
            QueueName: !GetAtt RunTaskQueue.QueueName
        - Statement:
          - Effect: Allow
            Action: ecs:RunTask
            Resource: "*"
          - Effect: Allow
            Action: iam:PassRole
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/BuildkiteTaskExecution/*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/BuildkiteAgentTask/*
          Version: "2012-10-17"
      Environment:
        Variables:
          ECS_CLUSTER_NAME: !Ref ECSCluster
          VPC_SUBNETS: !Join [ ',', [ !Ref PublicSubnetOne , !Ref PublicSubnetTwo ] ]
          TASK_ROLE_ARN_PREFIX: !Sub "arn:aws:iam::${AWS::AccountId}:role/BuildkiteAgentTask"
  RunTaskLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: BuildkiteRunTask
    Properties:
      RetentionInDays: 1
      LogGroupName:
        !Sub
        - '/aws/lambda/${LambdaName}'
        - LambdaName: !Ref BuildkiteRunTask

  BuildkiteScheduleTask:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that processes Buildkite Job Scheduled notifications from an EventBridge.
      Runtime: nodejs10.x
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');
        const https = require('https');

        async function scheduleRunTaskForBuildkiteJob(job) {
            console.log(`fn=scheduleRunTaskForBuildkiteJob`);
            
            let sqs = new AWS.SQS({apiVersion: '2012-11-05'});
            let message = {
              MessageBody: JSON.stringify({
                  Job: job,
              }),
              QueueUrl: process.env.SQS_QUEUE_URL,
            };
            return sqs.sendMessage(message).promise();
        }

        function getAgentQueryRule(rule, agentQueryRules) {
            let taskDefinition = agentQueryRules.filter(query_rule => {
                    return query_rule.startsWith(`${rule}=`);
                })
                .map(query_rule => {
                    return query_rule.split("=")[1];
                })
                .shift();
            
            return taskDefinition;
        }

        exports.handler = async (webhook) => {
            console.log(`fn=handler event=${JSON.stringify(webhook)}`);
            
            let queue = getAgentQueryRule("queue", webhook.job.agent_query_rules);
            let expectedQueue = process.env.BUILDKITE_QUEUE;
            if (queue != expectedQueue) {
                console.log(`fn=handler at=job_ignored`);

                return {
                    statusCode: 400,
                    body: JSON.stringify({
                        message: `ignoring this job, the agent query rules specify queue='${queue}' which doesn't match '${expectedQueue}'`,
                    }),
                };
            }
            
            let runTask = await scheduleRunTaskForBuildkiteJob(webhook.job);
            console.log(`fn=handler at=job_scheduled`);
            
            return {
                statusCode: 201,
                body: JSON.stringify({
                    message: "scheduled run task",
                }),
            };
        };
      Events:
        EventBridge:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBridgeBusName
            InputPath: $.detail
            Pattern:
              detail-type:
                - "Job Scheduled"
      MemorySize: 128
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSSendMessagePolicy:
            QueueName: !GetAtt RunTaskQueue.QueueName
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref RunTaskQueue
          BUILDKITE_QUEUE: !Ref BuildkiteQueue
  ScheduleTaskLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: BuildkiteScheduleTask
    Properties:
      RetentionInDays: 1
      LogGroupName:
        !Sub
        - '/aws/lambda/${LambdaName}'
        - LambdaName: !Ref BuildkiteScheduleTask

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /BuildkiteTaskExecution/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: FetchDecryptSSMBuildkiteToken
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'kms:Decrypt'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/buildkite/agent-token'
                  - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/aws/ssm'

  BuildkiteEventsLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/events/Buildkite"
      RetentionInDays: 1

  BuildkiteEventsLogRule:
    Type: AWS::Events::Rule
    Properties:
      Name: Log
      Description: Log all Buildkite events to a CloudWatch Log Group
      EventBusName: !Ref EventBridgeBusName
      EventPattern:
        account:
          - !Ref 'AWS::AccountId'
      Targets:
        - Id: Log
          Arn: !GetAtt BuildkiteEventsLog.Arn

  BuildkiteAgentTokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /buildkite/agent-token
      Type: String
      Value: !Ref BuildkiteAgentToken

  BuildkiteAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ecs/buildkite
      RetentionInDays: 1

  BuildkiteAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: agent
          Command:
            - buildkite-agent
            - start
          Essential: true
          Image: buildkite/agent:3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: /aws/ecs/buildkite
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: BUILDKITE_AGENT_TOKEN
              ValueFrom: /buildkite/agent-token
      Cpu: 256
      Memory: 512
      Family: buildkite
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE

Outputs:
  ECSTaskExecutionRole:
    Description: The ECS Task Execution role the runner lambda is permitted to pass to tasks.
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskExecutionRoleArn
  BuildkiteAgentTokenParameterPath:
    Description: The Systems Manager Parameter Store path that the Buildkite Agent Registration token is stored in.
    Value: /buildkite/agent-token
    Export:
      Name: !Sub ${AWS::StackName}-BuildkiteAgentTokenParameterPath
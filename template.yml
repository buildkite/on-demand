# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Buildkite On-Demand

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Buildkite
        Parameters:
          - BuildkiteAgentToken
          - BuildkiteQueue
      -
        Label:
          default: AWS
        Parameters:
          - EventBridgeBusName
          - VpcSubnetIds
    ParameterLabels:
      VpcSubnetIds:
        default: "(Optional) Which VPC subnets should agent containers run in?"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'

Parameters:
  EventBridgeBusName:
    Type: String
    Description: Name of an EventBridge Bus in this region that receives Buildkite Partner Events, see https://buildkite.com/docs/integrations/amazon-eventbridge.
    AllowedPattern: ^[a-zA-Z0-9\-\._/]+
  BuildkiteQueue:
    Type: String
    Description: Queue name that agents will be scheduled for on-demand, targeted in pipeline steps using an agent query rule "queue={value}".
    AllowedPattern: ^[a-zA-Z0-9\-_]{1,255}
  BuildkiteAgentToken:
    Type: String
    Description: Buildkite agent registration token, see https://buildkite.com/docs/agent/v3/tokens.
    NoEcho: true
  VpcSubnetIds:
    Type: CommaDelimitedList
    Default: ''
    Description: Comma separated list of VPC subnets to launch agent containers in. If left blank a simple VPC with public subnets, suitable for most use cases, will be created.

Conditions:
  CreateVpc: !Equals [ !Join [ ',', !Ref VpcSubnetIds ], '' ]

Resources:
  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpc
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateVpc
    Properties:
      Description: Ingress from self
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
  EcsSecurityGroupEgressV4:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateVpc
    Properties:
      Description: Egress to anywhere IPv4
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupEgressV6:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateVpc
    Properties:
      Description: Egress to anywhere IPv6
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      CidrIpv6: ::/0

  EcsCluster:
    Type: AWS::ECS::Cluster

  BuildkiteAgentTokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /buildkite/agent-token
      Type: String
      Value: !Ref BuildkiteAgentToken

  Scheduler:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:832577133680:applications/buildkite-on-demand-scheduler
        SemanticVersion: '0.1.0'
      Parameters:
        BuildkiteAgentTokenParameterPath: !Ref BuildkiteAgentTokenParameter
        BuildkiteQueue: !Ref BuildkiteQueue
        EventBridgeBusName: !Ref EventBridgeBusName
        VpcSubnetIds: !Join [ ',', [ !Ref PublicSubnetOne, !Ref PublicSubnetTwo ] ]
        EcsClusterName: !Ref EcsCluster

  Macro:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:832577133680:applications/buildkite-on-demand-transform
        SemanticVersion: '0.1.1'

Outputs:
  BuildkiteAgentTokenParameterPath:
    Description: The Systems Manager Parameter Store path that the Buildkite Agent Registration token is stored in.
    Value: /buildkite/agent-token
    Export:
      Name: !Sub ${AWS::StackName}-BuildkiteAgentTokenParameterPath
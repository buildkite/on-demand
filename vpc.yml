AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Buildkite On-Demand Default Vpc

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicOne, CIDR]
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicTwo, CIDR]
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpc
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VPC
  EcsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateVpc
    Properties:
      Description: Ingress from self
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup
  EcsSecurityGroupEgressV4:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateVpc
    Properties:
      Description: Egress to anywhere IPv4
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupEgressV6:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateVpc
    Properties:
      Description: Egress to anywhere IPv6
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      CidrIpv6: ::/0

Outputs:
  VpcSubnetIds:
    Description: The VpcSubnetIds for scheduling containers in.
    Value: !Join [ ',', [ !Ref PublicSubnetOne, !Ref PublicSubnetTwo ] ]
